if defined?(PryByebug)
  Pry.commands.alias_command 'ss', 'step'
  Pry.commands.alias_command 'nn', 'next'
  Pry.commands.alias_command 'cc', 'continue'
  Pry.commands.alias_command 'fin', 'finish'
  Pry.commands.alias_command 'uu', 'up'
  Pry.commands.alias_command 'dd', 'down'
  Pry.commands.alias_command 'ff', 'frame'
  Pry.commands.alias_command 'bb', 'break'
  Pry.commands.alias_command 'ww', 'whereami'

  Pry::Commands.command(/^$/, 'repeat last command') do
    _pry_.run_command Pry.history.to_a.last
  end
end

class Object
  def local_methods(obj = self)
    (obj.methods - obj.class.superclass.instance_methods).sort
  end

  # ri 'Array#pop'
  # Array.ri
  # Array.ri :pop
  # arr.ri :pop
  def ri(method = nil)
    unless method && method =~ /^[A-Z]/ # if class isn't specified
      klass = is_a?(Class) ? name : self.class.name
      method = [klass, method].compact.join('#')
    end
    puts `ri '#{method}'`
  end

  def quick(repetitions = 100, &block)
    require 'benchmark'

    Benchmark.bmbm do |b|
      b.report { repetitions.times(&block) }
    end
    nil
  end
end

# begin
#   $LOAD_PATH << '~/.asdf/installs/ruby/3.0.0/lib/ruby/gems/3.0.0/gems/awesome_print-1.8.0/lib/'
#   require 'awesome_print'

#   AwesomePrint.pry!
# rescue LoadError => e
#   puts "no awesome_print :( - #{e}"
# end
